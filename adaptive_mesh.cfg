# # # Klipper Adaptive Meshing # # #

# Heads up! If you have any other BED_MESH_CALIBRATE macros defined elsewhere in your config, you will need to comment out / remove them for this to work. (Klicky/Euclid Probe)
# You will also need to be sure that [exclude_object] is defined in printer.cfg, and your slicer is labeling objects.
# This macro will parse information from objects in your gcode to define a min and max mesh area to probe, creating an adaptive mesh!
# This macro will not increase probe_count values in your [bed_mesh] config. If you want richer meshes, be sure to increase probe_count. We recommend at least 5,5.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE

### This section configures mesh point fuzzing, which allows probe points to be varied slightly if printing multiples of the same G-code file.

variable_fuzz_enable: False             # Enables/disables the use of mesh point fuzzing to slightly randomize probing points to spread out wear on a build surface, default is False.
variable_fuzz_min: 0                    # If enabled, the minimum amount in mm a probe point can be randomized, default is 0.
variable_fuzz_max: 4                    # If enabled, the maximum amount in mm a probe point can be randomized, default is 4.

variable_margin_size: 5

### Do not change the variables below ###
variable_last_x_min: -1
variable_last_y_min: -1
variable_last_x_max: -1
variable_last_y_max: -1
variable_last_bed_temp: -1
variable_force_new_mesh: False

gcode:
    {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
    {% set euclid_available = printer['gcode_macro EuclidProbe'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg

    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}

    {% if 'exclude_object' in printer %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% endif %}

    {% if printer["print_setting adaptive_bed_mesh"] and printer["print_setting adaptive_bed_mesh"].value == False %}
        { action_respond_info("Adaptive bed mesh disabled. Performing full bed mesh.") }
        {% set x_min = bed_mesh_min[0] %}
        {% set y_min = bed_mesh_min[1] %}
        {% set x_max = bed_mesh_max[0] %}
        {% set y_max = bed_mesh_max[1] %}
    {% elif params.PRINT_MIN %}
        {% set x_min = params.PRINT_MIN.split(",")[0]|float %}
        {% set y_min = params.PRINT_MIN.split(",")[1]|float %}
        {% set x_max = params.PRINT_MAX.split(",")[0]|float %}
        {% set y_max = params.PRINT_MAX.split(",")[1]|float %}
    {% elif not all_points %}
        {% set x_min = bed_mesh_min[0] %}
        {% set y_min = bed_mesh_min[1] %}
        {% set x_max = bed_mesh_max[0] %}
        {% set y_max = bed_mesh_max[1] %}
    {% else %}
        {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
        {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
        {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
        {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
        { action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(
            all_points | count,
            bed_mesh_min,
            bed_mesh_max,
        )) }
    {% endif %}
    
    {% if y_max == bed_mesh_max[1] %}
    	{ action_respond_info("Creating new mesh") }
    	{% set force_new_mesh = True %}
    {% elif params.FORCE == True %}
        { action_respond_info("Creating new mesh since Force=True") }
        {% set last_x_max = 0 %}
	{% elif printer.heater_bed.temperature < (last_bed_temp - 2) or printer.heater_bed.temperature > (last_bed_temp + 2) %}
    	{ action_respond_info("Creating new mesh because bed temp has changed") }
	    {% set force_new_mesh = True %}
	{% endif %}

    {% if fuzz_enable == True %}
        {% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}
        {% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}
        {% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}
        {% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}
        {% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}
        {% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}
        {% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}
        {% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}
    {% endif %}


    {% if force_new_mesh or (x_min < last_x_min) or (x_max > last_x_max) or (y_min < last_y_min) or (y_max > last_y_max)  %}        
        { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
            (x_min, y_min), 
            (x_max, y_max),
        )) }
        
        {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
        {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
        
        {% if (([points_x, points_y]|max) > 6) %}
            {% set algorithm = "bicubic" %}
            {% set min_points = 4 %}
        {% else %}
            {% set algorithm = "lagrange" %}
            {% set min_points = 3 %}
        {% endif %}
        { action_respond_info( "Algorithm: {}".format(algorithm)) }
        
        {% set points_x = [points_x, min_points]|max  %}
        {% set points_y = [points_y, min_points]|max  %}
        { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

        {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
            {% set ref_index = (points_x * points_y / 2) | int %}
            { action_respond_info( "Reference index: {}".format(ref_index) ) }  
        {% else %}
            {% set ref_index = -1 %}
        {% endif %}

        {% if klicky_available %}
            _CheckProbe action=query
            Attach_Probe
        {% elif euclid_available %}
            DEPLOY_PROBE
        {% endif %}
        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}
        {% if printer["gcode_macro _status_meshing"] != null %}
            _status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_x_min VALUE={x_min}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_y_min VALUE={y_min}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_x_max VALUE={x_max}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_y_max VALUE={y_max}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_bed_temp VALUE={printer['heater_bed'].temperature}        
        {% if printer["gcode_macro status_ready"] != null %}
            status_ready
        {% endif %}
        {% if printer["gcode_macro _status_ready"] != null %}
            _status_ready
        {% endif %}
        {% if klicky_available %}
            Dock_Probe
        {% elif euclid_available %}
            STOW_PROBE
        {% endif %}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=force_new_mesh VALUE=False
    {% else %}
        { action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
    {% endif %}
